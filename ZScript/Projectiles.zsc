class DMR_Projectile : Actor
{
	Default
	{
		Projectile;
		+FORCEXYBILLBOARD;
	}
	
	int fxLoop;
}

class DMR_FastProjectile : FastProjectile
{
	Default
	{
		Projectile;
		+FORCEXYBILLBOARD;
	}
}


class EmptyBulletPuff : Actor
{
	Default
	{
		Radius 0;
		Height 1;
		PROJECTILE;
	}
	States
	{
	Spawn:
		TNT1 A 2;
		Stop;
	}
}

//======================================================================
//  Additional credits
//======================================================================
//	Sounds:		Westwood Studios
//======================================================================
class DMR_Rocket : DMR_Projectile
{
	Default
	{
		Radius 11;
		Height 8;
		Speed 20;
		DamageFunction(random(40,120));
		+RANDOMIZE
		+EXTREMEDEATH;
		SeeSound "largerocket/launch";
		DeathSound "weapons/rocklx";
	}
	States
	{
	Spawn:
		MISL A 1 Bright Light("DMR_ROCKET") {
			A_SpawnItemEx("DMR_MediumFireballTrail",-35,0,6,frandom(-1,0),frandom(-1,1),frandom(-1,0));
			A_SpawnItemEx("DMR_MediumSmokeCloud",-35,0,6,frandom(-1,0));
		}
		Loop;
	Death:
		TNT1 A 0 {
			A_SetRenderStyle(1.0,STYLE_Add);
		}
		TNT1 A 0 {
			for (fxLoop = 0;fxLoop <= 14;fxLoop++) {
				A_SpawnItemEx("DMR_MediumFireBouncingDebris",random(-2,2),random(-2,2),random(-2,2),frandom(-8,8),frandom(-8,8),frandom(-2,8)); 
			}
		}
		MISL B 8 Bright Light("DMR_ROCKET_X1") A_Explode(128,128);
		MISL C 6 Bright Light("DMR_ROCKET_X2");
		MISL D 4 Bright Light("DMR_ROCKET_X3");
		Stop;
	}
}

//======================================================================
//  Additional credits
//======================================================================
//	Sounds:		Westwood Studios
//======================================================================
class DMR_SmallRocket : DMR_Rocket
{
	Default
	{
		Radius 9;
		Height 7;
		DamageFunction(random(20,60));
		SeeSound "smallrocket/launch";
		Scale 0.8;
	}
	States
	{
	Spawn:
		MISL A 1 Bright Light("DMR_SROCKET") {
			A_SpawnItemEx("DMR_FireballTrail",-28,0,5,frandom(-1,0),frandom(-1,1),frandom(-1,0));
			A_SpawnItemEx("DMR_SmokeCloud",-28,0,5,frandom(-1,0));
		}
		Loop;
	Death:
		TNT1 A 0 {
			A_SetRenderStyle(1.0,STYLE_Add);
			A_SetScale(1.0);
		}
		TNT1 A 0 {
			for (fxLoop = 0;fxLoop <= 10;fxLoop++) {
				A_SpawnItemEx("DMR_MediumFireBouncingDebris",random(-2,2),random(-2,2),random(-2,2),frandom(-8,8),frandom(-8,8),frandom(-2,8)); 
			}
		}
		MISL B 8 Bright Light("DMR_SROCKET_X1") A_Explode(96,96);
		MISL C 6 Bright Light("DMR_SROCKET_X2");
		MISL D 4 Bright Light("DMR_SROCKET_X3");
		Stop;
	}
}

// grenade
Class DMR_GrenadeBase : DMR_Projectile
{
	Default
	{
		Radius 8;
		Height 8;
		Speed 25;
		DamageFunction(random(16,48));
		-NOGRAVITY
		+THRUGHOST
		BounceType "Doom";
		BounceFactor 0.75;
		Gravity 0.5;
		SeeSound "Paladin/Grenade";
		DeathSound "Paladin/Bounce";
		BounceSound "Paladin/Bounce";
	}
	
	int grenadeTimer;	
}

class DMR_ThrownGrenade : DMR_GrenadeBase
{
	Default
	{
		Speed 20;
		DamageFunction(random(10,30));
		BounceFactor 0.75;
		Gravity 0.5;
		SeeSound "";
		DeathSound "Paladin/Explode";
		BounceSound "dune/bounce";
		Scale 0.75;
	}
}

// cluster missile
class DMR_ClusterSubProjectile : DMR_Projectile
{
	Default
	{
		Radius 9;
		Height 7;
		Speed 10;
		DamageFunction(random(10,30));
		+RANDOMIZE
		+SEEKERMISSILE;
		SeeSound "largerocket/launch";
		DeathSound "skeleton/tracex";
		Scale 0.5;
	}
	int fuelLevel;
	
	States
	{
	//TODO simplify me, see PyroDemonCometSpawner / CryptekEtherstorm
	Spawn:
		TNT1 A 0 NoDelay A_Jump(128,"Homing"); 
		TNT1 A 0 {
			fuelLevel = random(75,100); // set fuel lifetime
		}
		TNT1 A 0 A_JumpIf(fuelLevel < 1,"Death");
		HMIS A 1 Bright {
			If (fuelLevel > 20) { // stop fire exhaust if fuel is running low 
				A_SpawnItemEx("DMR_FireballTrail",-25,0,0,frandom(-1,0),frandom(-1,1),frandom(-1,0));
			}
			fuelLevel--;
		}
		HMIS A 1 BRIGHT A_Weave(random(1,2), random(1,2), frandom(0.5,1.5), frandom(0.5,1.5));
		Goto Spawn+2;
	Homing:
		TNT1 A 0 {
			fuelLevel = random(75,100);	//set fuel lifetime
		}
		TNT1 A 0 A_JumpIf(fuelLevel < 1,"Death");
		HMIS A 1 Bright { 
			A_SeekerMissile(2,8,SMF_PRECISE); 
			If (fuelLevel > 20) { // stop fire exhaust if fuel is running low 
				A_SpawnItemEx("DMR_FireballTrail",-25,0,0,frandom(-1,0),frandom(-1,1),frandom(-1,0));
			}
			A_SpawnItemEx("DMR_SmokeCloud",-25,0,0,frandom(-1,0));
			fuelLevel--;
		}
		HMIS A 1 BRIGHT A_Weave(random(1,2), random(1,2), frandom(0.5,1.5), frandom(0.5,1.5));
		Goto Homing+1;
	Death:
		TNT1 A 0 {
			A_Stop();
			A_SetRenderStyle(1.0,STYLE_Add);
			A_SetScale(0.75);
		}
		TNT1 A 0 {
			for (fxLoop = 0;fxLoop <= 3;fxLoop++) {
				A_SpawnItemEx("DMR_FireBouncingDebris",random(-1,1),random(-1,1),random(-1,1),frandom(-5,5),frandom(-5,5),frandom(-1,5));
			}
		}
		MISL A 8 Bright;
		MISL B 6 Bright;
		MISL C 4 Bright;
		Stop;
	}
}

//======================================================================
//  Original credits
//======================================================================
//	ZScript: 	DustedPandemonic, modified by Dutchygamer
//======================================================================
Class DMR_FlamethrowerBall : DMR_Projectile
{
	Default
	{
		Radius 4;
		Height 4;
		Speed 13;
		RenderStyle "Add";
		DamageType "Fire";
		Alpha 0.67;
		Scale 0.4;
		+THRUACTORS;
		+BRIGHT
		+NODAMAGETHRUST;
		+DONTSPLASH;
		VSpeed 0.5;
	}
	int dmgtic;
	
	States
	{
	Spawn:
		FRFX AABBCCDDEEFFGGHHIIJJKK 1 {
			A_SetScale(Scale.X + 0.03);
			// only deal damage X amount of tics instead of every tick
			dmgtic++;
			if(dmgtic >= 3)
			{
				A_Explode(3,32,0,0,32);
				dmgtic = 0;
			}		
		}
		FRFX LLMMNNOO 1 {
			A_SetScale(Scale.X + 0.03);
		}
		Stop;
	}
	
	// the 'float down to lowest point' logic
	// after waaay too many trial and errors with various combinations of actor flags, I realized it would be way easier to do this with Zscript overrides
	override void Tick()
	{
		Super.Tick();
		// check whether we are not on the floor
		// double check it by comparing the z value and the dedicated TestMobjZ function
		bool isInAir = ( (pos.z > floorz) && TestMobjZ() );
		// if in air, slowly increase the z velocity every tick so we float down slowly
		if ( isInAir ) {
			vel.z -= 0.08;
		// if not in the air, set our z velocity to 0
		} else {
			vel.z = 0;		
		}
	}
}

class DMR_FlamethrowerBallLarge : DMR_FlamethrowerBall
{
	Default
	{
		Radius 6;
		Height 6;
		Scale 0.7; //1;
	}
	States
	{
	Spawn:
		FRFX AABBCCDDEEFFGGHHIIJJKK 1 {
			A_SetScale(Scale.X + 0.03);
			// only deal damage X amount of tics instead of every tick
			dmgtic++;
			if(dmgtic >= 3)
			{
				A_Explode(3,64,0,0,64);
				dmgtic = 0;
			}		
		}
		FRFX LLMMNNOO 1 {
			A_SetScale(Scale.X + 0.03);
		}
		Stop;
	}
}

//unused
class DMR_FlamethrowerExplode : Actor
{
	Default
	{
		SeeSound "dragonfam/attack";
		Radius 8;
		Height 8;
		Gravity 0;
		Speed 0;
		Scale 0.7;
		+DONTSPLASH;
	}
	States
	{
	Spawn:
		NKXP B 2 Bright;
		NKXP C 2 Bright;
		NKXP D 2 Bright A_Explode(20, 96); //(15, 64)
		NKXP EFGHIJKLMNOPQRSTUV 2 Bright;
		Stop;
	}
}

//unused
class DMR_FlamethrowerExplodeLarge : DMR_FlamethrowerExplode
{
	Default
	{
		Scale 1.1;
	}
	States
	{
	Spawn:
		NKXP B 2 Bright;
		NKXP C 2 Bright;
		NKXP D 2 Bright A_Explode(30, 128); //(25, 96)
		NKXP EFGHIJKLMNOPQRSTUV 2 Bright;
		Stop;
	}
}

//laser
class DMR_LaserBase : DMR_FastProjectile
{
	Default
	{
		Radius 2;
		Height 2;
		Speed 125;
		DamageFunction(random(16,48));
		//this defines a laser
		+RANDOMIZE;
		+DONTSPLASH;
		+DONTREFLECT;
		-CANNOTPUSH;
		+NODAMAGETHRUST;
		RenderStyle "Add";
		Alpha 0.75;
		DamageType "Disintegrate";
		MissileType "LaserTrailBase";
		MissileHeight 10;
		seesound "BeamRevenant/Fire";
		decal "RailScorchLower";
		Scale 0.5;
	}
	States
	{
	Spawn:
		TNT1 A 1;
		Loop;
	Death:
		BFE1 ABCDEF 5 Bright;
		Stop;
	}
}

class DMR_LaserTrailBase : Actor
{
	Default
	{
		RenderStyle "Add";
		Scale 0.2;
		Alpha 1;
		+NOINTERACTION;
		+NOGRAVITY;
		+DONTSPLASH;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay			A_SpawnItemEx("DMR_LaserFlare",0,0,0,frandom(-1,0),frandom(-1,1),frandom(0,1));
		LASB A 1 Bright;
	SpawnLoop:
		LASB A 1 Bright A_FadeOut(0.2);
		Loop;
	}
}

// plasma
class DMR_ZombiePlasma : DMR_Projectile
{
	Default
	{		
		Radius 13;
		Height 8;
		Speed 25;
		DamageFunction(random(10,30));
		+RANDOMIZE
		RenderStyle "Add";
		Alpha 0.75;
		SeeSound "weapons/plasmaf";
		DeathSound "weapons/plasmax";
	}
	states
	{
	Spawn:
		PLSS AAABBB 2 Bright  {
			A_SpawnItemEx("DMR_PlasmaTrail",frandom(-0.5,0.5),frandom(-0.5,0.5),frandom(-0.5,0.5));
		}
		Loop;
	Death:
		TNT1 A 0 {
			A_SpawnItemEx("DMR_PlasmaImpactFlare");
		}
		PLSS ABCDE 5 Bright;
		Stop;
	}
}


//gas clouds
class DMR_GasCloudBase : actor
{
	Default
	{
		Radius 6;
		Height 6;
		Projectile;
		DamageType "ToxinCloud";
		RENDERSTYLE "translucent";
		ALPHA 0.50;
		// tags for the gascloud itself
		+THRUACTORS;
		+DONTTHRUST;
		+RANDOMIZE;
		+DONTSPLASH;
		+DONTREFLECT;
		+NOBLOOD;
		// tags for the damage it deals
		+BLOODLESSIMPACT;
		+FORCERADIUSDMG;
		+NODAMAGETHRUST;
		+PAINLESS; // else it WILL stunlock everything hit by gasclouds		
		BounceType "Hexen";
		BounceFactor 1.0;
		WallBounceFactor 1.0;
		//note: with Scale 2.0, A_Explode should use 45 as radius
	}
	int lifetime;
	int dmgtic;
	
	// the 'float down to lowest point' logic
	// after waaay too many trial and errors with various combinations of actor flags, I realized it would be way easier to do this with Zscript overrides
	override void Tick()
	{
		// check whether we are not on the floor
		// double check it by comparing the z value and the dedicated TestMobjZ function
		bool isInAir = ( (pos.z > floorz) && TestMobjZ() );
		// if in air, set a z velocity so we float down slowly
		if ( isInAir ) {
			vel.z = -0.4;
		// if not in the air, set our z velocity to 0
		} else {
			vel.z = 0;		
		}
		Super.Tick();
	}
}

class DMR_LargeGasCloud : DMR_GasCloudBase
{
	Default
	{
		Scale 2.0;
	}
	States
	{
	Spawn: 
		GGAS OPQR 6;
		TNT1 A 0 {
			lifetime = random(13,18); //should always be second, else it will run 1 time and die
		}
	SpawnLoop:
		TNT1 A 0 A_JumpIf(lifetime < 1,"Death");		
		GGAS ABCDEFGHIJKLMN 3 {	
			// only damage X amount of tics instead of every tick
			dmgtic++;	
			if(dmgtic >= 5)
			{
				A_Explode(5,45,0,0,45);
				dmgtic = 0;
			}	
		}
		TNT1 A 0 {
			lifetime = lifetime-3;
		}
		Loop;
	Death: 
		GGAS STUVW 3 {
			A_SetTranslucent(Alpha - 0.1);
		}
		Stop;
	}
}

class DMR_MediumGasCloud : DMR_GasCloudBase
{
	Default
	{
		Scale 1.5;
	}
	States
	{
	Spawn: 
		GGAS OPQR 6;
		TNT1 A 0 {
			lifetime = random(9,14); //should always be second, else it will run 1 time and die
		}
	SpawnLoop:
		TNT1 A 0 A_JumpIf(lifetime < 1,"Death");		
		GGAS ABCDEFGHIJKLMN 3 {	
			// only damage X amount of tics instead of every tick
			dmgtic++;	
			if(dmgtic >= 5)
			{
				A_Explode(5,34,0,0,34);
				dmgtic = 0;
			}	
		}
		TNT1 A 0 {
			lifetime = lifetime-3;
		}
		Loop;
	Death: 
		GGAS STUVW 3 {
			A_SetTranslucent(Alpha - 0.1);
		}
		Stop;
	}
}

class DMR_SmallGasCloud : DMR_GasCloudBase
{
	States
	{
	Spawn: 
		GGAS OPQR 6;
		TNT1 A 0 {
			lifetime = random(4,7); //should always be second, else it will run 1 time and die
		}
	SpawnLoop:
		TNT1 A 0 A_JumpIf(lifetime < 1,"Death");		
		GGAS ABCDEFGHIJKLMN 3 {	
			// only damage X amount of tics instead of every tick
			dmgtic++;	
			if(dmgtic >= 5)
			{
				A_Explode(5,28,0,0,28);
				dmgtic = 0;
			}	
		}
		TNT1 A 0 {
			lifetime = lifetime-3;
		}
		Loop;
	Death: 
		GGAS STUVW 3 {
			A_SetTranslucent(Alpha - 0.1);
		}
		Stop;
	}
}

class DMR_MediumIceCloud : DMR_MediumGasCloud
{
	Default
	{
		DamageType "Ice";
	}
	States
	{
	Spawn: 
		GAS3 HIJK 6;
		TNT1 A 0 {
			lifetime = random(9,14); //should always be second, else it will run 1 time and die
		}
	SpawnLoop:
		TNT1 A 0 A_JumpIf(lifetime < 1,"Death");		
		GAS3 ABCDEFG 3 {	
			// only damage X amount of tics instead of every tick
			dmgtic++;	
			if(dmgtic >= 3)
			{
				A_Explode(5,34,0,0,34);
				dmgtic = 0;
			}	
		}
		TNT1 A 0 {
			lifetime = lifetime-3;
		}
		Loop;
	Death: 
		GAS3 LMNO 3 {
			A_SetTranslucent(Alpha - 0.1);
		}
		Stop;
	}
}

// fire field
class DMR_BurningFire : Actor
{
	Default
	{
		Radius 4;
		Height 4;
		RenderStyle "Add";
		Alpha 0.9;
		DamageType "Fire";
		Scale 2.5; //3; //0.7
		+THRUACTORS;		
		+NOBLOOD;
		+RANDOMIZE;
		+FORCERADIUSDMG;
		+NODAMAGETHRUST;
		+DONTTHRUST;
		+DONTSPLASH;
		+PAINLESS; // else it WILL stunlock everything hit by a Mancutank rocket barrage
	}
	
	int lifetime;
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay {
			lifetime = random(6,10);
		}
	SpawnLoop:
		TNT1 A 0 A_JumpIf(lifetime < 1,"Death");
		CFCF ABCDE 2 Bright A_Explode(2,48,0);
		TNT1 A 0 {
			lifetime -= 1;
		}
		CFCF FGHIJ 2 Bright A_Explode(2,48,0);
		TNT1 A 0 {
			lifetime -= 1;
		}
		Loop;
	Death:
		CFCF KLMOP 2 Bright;
		Stop;
	}
}

// a visible alternative to hitscan attacks
class DMR_SlowBullet : DMR_Projectile
{
	Default
	{
		Radius 6;
		Height 3;
		Speed 60;
		DamageFunction(random(6,16));
		Scale 0.2;
		Decal ""; //"BulletChip";
		+BLOODSPLATTER;
	}
	States
	{
	Spawn:
		SHLL A 1 Bright;
		Loop;
	Death:
		TNT1 A 1 A_SpawnItemEx("BulletPuff");
		Stop;
	XDeath:
		TNT1 A 1;
		Stop;
	}
}
