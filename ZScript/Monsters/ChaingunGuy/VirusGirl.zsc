//======================================================================
//  Original credits
//======================================================================
//  DECORATE: 	DavidRaven
//	Sounds:		DavidRaven, Id software
//  Sprites: 	Id Software (Zombieman), the Skulltag Team (Illucia, Player II), DavidRaven, ItsNatureToDie (altdeath)
//	GLDEFs: 	DavidRaven
//======================================================================
//  Additional credits
//======================================================================
//	Sounds:		Westwood Studios	
//  Sprites:	Dutchygamer (modification of original sprites)
//	ZScript:	Dutchygamer
//======================================================================

class FormerViralAgent : DMR_MonsterBase
{
	Default
	{
		Tag "Former Viral Agent";
		Obituary "%o was infected by a Former Viral Agent.";
		Health 90;
		Gibhealth -20; // all lower tier monsters (zombies -> imp) have 20 gibhealth
		Species "DMR_Zambies";
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		PainChance 100;
		SeeSound "virus/sight";
		PainSound "virus/pain";
		DeathSound "virus/death";
		ActiveSound "virus/active";
		+MISSILEMORE;
		+DOHARMSPECIES; // zombies aren't viral-proof
		DamageFactor "VirusPoison", 0.0;
		DamageFactor "ToxinCloud", 0.0;
		Dropitem "Stimpack", 256; // spawns health instead of ammo
	}
 	States
	{
	Spawn:
		ZOMW AB 10 A_Look;
		Loop;
	See:
		ZOMW AABBCCDD 3 A_Chase;
		Loop;
	Missile:
		TNT1 A 0 A_Jump(96, "Grenade");
	Dart:
		ZOMW E 20 A_FaceTarget;
		ZOMW F 4 {
			A_StartSound("virus/fire",CHAN_WEAPON);
			A_SpawnProjectile("VirusDart",32);
		}
		ZOMW E 20;
		goto See;
	Grenade:
		ZOMW A 0 {
			A_StartSound("handgrenade/prime", CHAN_WEAPON);
		}
		ZOMW EEE 8 A_FaceTarget;
		ZOMW F 5 {
			A_StartSound("handgrenade/throw", CHAN_WEAPON);
			A_SpawnProjectile("VirusGrenade",32,0,random(9,-9),CMF_OFFSETPITCH,random(-2,2));
		}
		ZOMW E 4;
		Goto See;
	Pain:
		ZOMW G 3;
		ZOMW G 3 A_Pain;
		Goto See;
	Death:
		ZOMW H 5;
		ZOMW I 5 A_Scream;
		ZOMW J 5 A_NoBlocking;
		ZOMW KLM 5;
		ZOMW N -1;
		Stop;
	XDeath:
		ZOMW O 5;
		ZOMW P 5 A_XScream;
		ZOMW Q 5 A_NoBlocking;
		ZOMW RSTUV 5;
		ZOMW W -1;
		Stop;
	Raise:
		ZOMW MLKJIH 5;
		Goto See;
	}
}

Class VirusDart : DMR_SlowBullet
{
	Default
	{
		Speed 65;
		DamageFunction (random(25,35)); // don't use the default formula
		DamageType "VirusPoison";
		+EXTREMEDEATH; //always use explode death
	}
	
	States
	{
	Spawn:
		SHLL A 1 Bright {
			A_SpawnItemEx("VirusDartTrail",0,0,0,frandom(-0.5,0),frandom(-0.5,0.5),frandom(0,0.5)); 
		}
		Loop;
	}	
	
	override int DoSpecialDamage(actor target, int damage, name damagetype)
	{
		// only modify the damage when target is a player or monster
		if (target && (target.player || target.bIsMonster))
		{
			// inspired by Hexen's flechette.zs DoSpecialDamage()
			// we need to take the target's damageFactors into account
			// mainly to stop the projectile from spawning gas clouds when hitting a low-health Virus
			
			// Handle passive damage modifiers (e.g. PowerProtection)
			damage = target.GetModifiedDamage(damagetype, damage, true);
			// Modify with damage factors
			damage = target.ApplyDamageFactor(damagetype, damage);

			// when we deal damage, either apply a debuff or spawn gas clouds
			if (damage > 0)
			{
				// spawn gas clouds from target if target dies and bleeds
				if((target.health - damage < 0) && !target.bNoBlood)
				{
					int targetMaxHealth = target.GetMaxHealth();
					
					// number and size of gas clouds depends on original health
					// always spawn at least one medium gas clouds				
					target.A_StartSound("gas/explode");				target.A_SpawnItemEx("DMR_MediumGasCloud",0,0,5,frandom(-1,1),frandom(-1,1),0,0);
					
					if (targetMaxHealth >= 100)
					{
						target.A_SpawnItemEx("DMR_MediumGasCloud",0,0,5,frandom(-1,1),frandom(-1,1),0,0);				
					}
					if (targetMaxHealth >= 300)
					{
						target.A_SpawnItemEx("DMR_MediumGasCloud",0,0,5,frandom(-1,1),frandom(-1,1),0,0);				
					}
					if (targetMaxHealth >= 600)
					{
						target.A_SpawnItemEx("DMR_LargeGasCloud",0,0,5,frandom(-0.5,0.5),frandom(-0.5,0.5),0,0);			
					}
					if (targetMaxHealth >= 1000)
					{
						target.A_SpawnItemEx("DMR_LargeGasCloud",0,0,5,frandom(-0.5,0.5),frandom(-0.5,0.5),0,0);			
					}
				}
				// apply damage debuff effect on target if still alive
				else
				{
					target.GiveInventory("VirusDebuffGiver",1);
				}		
			}			
		}
		
		return Super.DoSpecialDamage(target,damage,damagetype);
	}
}


class VirusDartTrail : DMR_SmallGasTrail
{   
	Default
	{
		ALPHA 0.3;
		Scale 0.3;
	}
	States
	{
	Spawn:
		GAS2 ABCDEFGHIJKLMN 1;
		Stop;
	}
}

class VirusDebuffGiver : PowerupGiver
{
	Default
	{
		Powerup.Type "VirusDebuffEffect";
		Powerup.Duration -3;
		Powerup.Colormap 0.95,1.0,0.95;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;	
	}
}

//======================================================================
//  Additional credits
//======================================================================
//	ZScript:	Dutchygamer
//	DustedPandemonic for the Translation logic
//======================================================================
class VirusDebuffEffect : PowerDamage
{
	Default
	{
		Inventory.Icon "";
		Damagefactor "normal", 0.5;
		+INVENTORY.NOSCREENBLINK;
	}
	
	override void DoEffect()
	{
		// when applied on monsters apply a translation to the sprites
		if (Owner && owner.bISMONSTER)
		{
			owner.A_SetTranslation("ViralInfection");
		}
		Super.DoEffect();
	}

	override void EndEffect()
	{
		// when applied on monsters reset the translation of the sprites
		if (Owner && owner.bISMONSTER)
		{
			owner.translation = default.translation;
		}
		Super.EndEffect();
	}

	override void OwnerDied()
	{
		// when applied on monsters reset the translation of the sprites
		if (Owner)
		{
			owner.translation = default.translation;
		}
		Destroy();
	}
}

class VirusGrenade : SpecOpsGrenade
{
	Default
	{
		DamageFactor "ToxinCloud", 0.0;
		DMR_Projectile.ParticleColors "#00d423", "#19ed3c", "#a9ffb7", "#b8ffc4";
	}
	States
	{
	//Spawn:
	//	THR2 A 4;
	//	THR2 B 1 Bright;
	//	Loop;
	Death:
		TNT1 A 0 {
			bNoGravity = true;
			A_Stop();
			A_SetRenderStyle(1.0,STYLE_Add);
			A_SetScale(2.5);
			A_StartSound("gas/explode");	
			A_SpawnItemEx("DMR_GasBallImpactSpawner");
			for (fxLoop = 0;fxLoop<=30;fxLoop++)
			{
				A_SpawnParticle(GetParticleColor(),SPF_FULLBRIGHT|SPF_RELATIVE,random(10,18),frandom(12,14),random(0,360),frandom(0,6),0,frandom(-4,4),frandom(0,6),0,frandom(-6,6),0,0,-0.1,1,-1,-0.6);
			}
		}	
		FVUL C 4 {
			A_Explode(10,48);
			A_SpawnItemEx("DMR_MediumGasCloud",0,0,5,frandom(-1,1),frandom(-1,1),0,0,SXF_ORIGINATOR);
			A_SpawnItemEx("DMR_SmallGasCloud",0,0,5,frandom(-1,1),frandom(-1,1),0,0,SXF_ORIGINATOR);
			A_SpawnItemEx("DMR_SmallGasCloud",0,0,5,frandom(-1,1),frandom(-1,1),0,0,SXF_ORIGINATOR);
		}
		FVUL DEF 4;
		Stop;
	}
}
