//======================================================================
//  Original credits
//======================================================================
//  DECORATE: 	Vader
//	Sounds:		Id Software, Blizzard Entertainment, Vader
//  Sprites: 	Vader, Eriance (cannon base)
//	GLDEFs: 	Dreadopp, Sandypaper (Brightmaps)
//======================================================================
//  Additional credits
//======================================================================
//	Sounds:		Westwood Studios
//	ZScript:	Dutchygamer
//======================================================================

class KurCenturion : DMR_Cyberdemon
{
	Mixin DMR_BerserkingMonster;

	Default
	{
		Tag "Kur Centurion";
		Health 5000;
		PainChance 15;
		DropItem "RocketBox", 256, 5;
		DropItem "Cell", 128, 20;
		DropItem "Cell", 128, 20;
		Scale 1.4;
		Obituary "%o was shown true discipline by a Kur Centurion.";
		-MISSILEMORE;
		+MISSILEEVENMORE;
		SeeSound "kurcenturion/sight";
		PainSound "kurcenturion/pain";
		DeathSound "kurcenturion/death";
		ActiveSound "kurcenturion/termact";
		StencilColor "Yellow";
	}
	int boolet;
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay {
			berserkThreshold = 1250;
		}
		TERM AB 10 A_Look;
		Loop;
	See:
		TERM AABB 3 {		
			A_SetBerserkerTics(3,2);
			A_Chase();
		}
		TNT1 A 0 A_Playsound("kurcenturion/step");
		TERM CCDD 3 {		
			A_SetBerserkerTics(3,2);
			A_Chase();
		}
		TNT1 A 0 A_Playsound("kurcenturion/step");
		Loop;	
	Missile:
		// when critically damaged fire more shots
        TNT1 A 0 {
			if (criticalDamaged)
				attackloop = -2;
			else
				attackloop = 0;
		}	
		TNT1 A 0 A_Jump(256, "Rockets", "RocketBurst", "Flamethrower");
		Goto See;
	Rockets:
		TERM E 6 A_FaceTarget;
	RocketsLoop:
		TNT1 A 0 A_JumpIf(attackloop >= 3,"RocketsEnd");
		TERM F 10 Bright Light("DMR_RifleFire") {
			A_SpawnProjectile("DMR_Rocket",56,25,0);
			attackloop++;
		}
		TERM E 8 A_FaceTarget;
		Loop;
	RocketsEnd:
		TNT1 A 0 {
			// when not berserking stop attacking
			if (!criticalDamaged) { SetStateLabel("See"); }
			// when berserking small chance to stop attacking
			if (criticalDamaged && random(1,10) == 10) { SetStateLabel("See"); }
		}
		// otherwise switch to different attack if target is still in LoS
		TNT1 A 0 A_MonsterRefire(0,"See");
		TERM E 8 A_FaceTarget;
		Goto Missile;
	RocketBurst:
		TERM E 12 {
			A_FaceTarget();
			A_PlaySound("heavyweapon/load");
		}
	RocketBurstLoop:
		TNT1 A 0 A_JumpIf(attackloop >= 3,"RocketsEnd"); // as we use same attack frames we can re-use RocketsEnd here
		TERM F 5 Bright Light("DMR_RifleFire") {
			A_FaceTarget();
			A_SpawnProjectile("KurCenturionWeaveRocket",56,25,0);
			attackloop++;
		}
		Loop;
	Grenades:	
		TERM GGG 6 {
			A_Facetarget();
			A_PlaySound("heavyweapon/load");
		}
		TERM G 6 A_Facetarget;
	GrenadesLoop:
		TNT1 A 0 A_JumpIf(attackloop >= 6,"GrenadesEnd");
		TERM H 4 Bright Light("DMR_RifleFire") {
			A_LobProjectile("DMR_FiredGrenade",56,-24, frandom(-5,5));
			attackloop++;
		}
		TERM G 3 A_Facetarget;
		TERM I 4 Bright Light("DMR_RifleFire") {
			A_LobProjectile("DMR_FiredGrenade",56,-24, frandom(-5,5));
			attackloop++;
		}
		TERM G 3 A_Facetarget;
		Loop;
	GrenadesEnd:
		TERM G 8;
		TNT1 A 0 {
			// when not berserking stop attacking
			if (!criticalDamaged) { SetStateLabel("See"); }
			// when berserking small chance to stop attacking
			if (criticalDamaged && random(1,10) == 10) { SetStateLabel("See"); }
		}
		// otherwise switch to different attack if target is still in LoS
		TNT1 A 0 A_MonsterRefire(0,"See");
		Goto Missile;
	Flamethrower:
		TNT1 A 0 {
			// switch to grenades if target is too far away
			if(target && Distance3D(target) > 300) SetStateLabel("Grenades");
		}
		TERM G 12 Bright A_FaceTarget;
		TNT1 A 0 { 
			attackloop = 0; 
			A_PlaySound ("flamethrower/fire", CHAN_WEAPON);
		}
	FlamethrowerLoop:
		TNT1 A 0 A_JumpIf(attackloop >= 30,"FlamethrowerEnd");
		TERM K 1 Bright {
			A_FaceTarget();
			attackloop++;
			A_SpawnProjectile("DMR_FlamethrowerBallLarge",56,-24,random(-3,3));
		}
		Loop;
	FlamethrowerEnd:
		TNT1 A 0 A_Jump(128, "Rockets", "Grenades"); // large chance to switch to a different weapon
		TERM G 12 A_MonsterRefire(10,"See");
		Goto Flamethrower;
	CriticalDamage:
		TNT1 A 0 { 
			bNOPAIN = true; 
			bQUICKTORETALIATE = true;
			A_SetSpeed(speed*1.2);
			criticalDamaged = true;
		}
		TERM L 10 Light("MonsterGoBerserk") {
			A_StartSound("kurcenturion/pain",CHAN_VOICE);
			A_StartSound("kurcenturion/sight",CHAN_VOICE,CHANF_OVERLAP);
		}
		TERM AAAAAAAAAAAAAAAAAAAA 1 {
			A_SpawnItemEx("GoneBerserkSmokeCloud",-5,0,70,frandom(-1,0),frandom(-1,1),frandom(0,1)); 
			A_SpawnItemEx("GoneBerserkSmokeCloud",-5,0,70,frandom(-1,0),frandom(-1,1),frandom(0,1)); 
			A_SpawnItemEx("DMR_FireBouncingDebris",-5,0,70,frandom(-1,0),frandom(-1,1),frandom(0,1)); 
			A_SpawnItemEx("DMR_FireBouncingDebris",-5,0,70,frandom(-1,0),frandom(-1,1),frandom(0,1)); 
			A_SpawnItemEx("DMR_FireBouncingDebris",-5,0,70,frandom(-1,0),frandom(-1,1),frandom(0,1)); 
			if (random(1,4) == 1){
				A_SpawnItemEx("DMR_BossDeathExplosion",random(8,-8),0,random(20,40));				
			}
		}
		TERM G 10 Light("MonsterGoBerserk") {
			A_StartSound("kurcenturion/sight",CHAN_VOICE);
			A_FaceTarget();
		}
		TERM G 10 A_FaceTarget;
		TNT1 A 0 {
			bNOPAIN = false;
			attackloop = -2;
		}
		Goto Grenades;
	Pain:
		TERM L 10 A_Pain;
		Goto See;
	Death:	
		TERM LLLLLL 6 {
			A_SpawnItemEx("DMR_KurCenturionDeathExplosionSpawner");
		}
		TERM M 6 A_Scream;
		TERM N 6;
		TERM OPQ 5 Bright;
		TERM R 6 Bright {
			A_SpawnItemEx("DMR_BossDeathFinalExplosion");
			A_SpawnProjectile("KurCenturionHead",90,15,-170,0);
			A_SpawnProjectile("KurCenturionShoulder",75,60,-70,0);
			A_SpawnProjectile("KurCenturionArm",0,60,-90,0);
		}
		TERM STUV 4 Bright;
		TERM W 4;
		TERM X 6 A_NoBlocking;
		TERM Y 6;
		TERM Z 6 A_Playsound("kurcenturion/step");
		TERM [ 50;
		TERM [ -1 A_BossDeath;
		Stop;
	}
}

//======================================================================
//  Original credits
//======================================================================
//	ZScript: 	Cutmanmike, modified by Dutchygamer
//======================================================================
class KurCenturionWeaveRocket : DMR_SmallRocket
{
	double dist;
	
	override void Tick()
	{
		if (dist == 0)
		{
			// get a random weave index, and set the distance to the default of 1.5
			WeaveIndexXY = random(0,63);
			dist = 1.5;
			
			FLineTraceData line;

			// if projectile would hit a wall by weaving into it, set weave distance to 0
			LineTrace(angle + 48, 128, 0, TRF_THRUACTORS, height/2, 0, 0, line);
			if (line.HitType == TRACE_HitWall)
			{
				dist = 0;
			}

			// check same for other direction
			LineTrace(angle - 48, 128, 0, TRF_THRUACTORS, height/2, 0, 0, line);
			if (line.HitType == TRACE_HitWall)
			{
				dist = 0;
			}
		}

		// perform the weave with the calculated distance if we're still moving
		if (Abs(vel.x + vel.y) >= 0.1)
		{
			A_Weave(2,2,dist,dist);
		}	
		
		Super.Tick();
	}
}

class KurCenturionArm : DMR_DroppedShield
{
	Default
	{
		Radius 12;
		Height 15;
		Speed 3;
		scale 1.6;
	}
	States
	{
	Spawn:
		TARM A 5;
		TARM B 5;
		TARM CDE 5;
	Death:
		TARM F -1;
		Stop;
	}
}

class KurCenturionHead : DMR_DroppedShield
{
	Default
	{
		Radius 6;
		Height 8;
		Speed 10;
		Scale 1.6;
	}
	States
	{
	Spawn:
		THAD DEFGHABC 2;
		loop;
	Death:
		THAD I -1;
		loop;
	}
}

class KurCenturionShoulder : DMR_DroppedShield
{
	Default
	{
		Radius 8;
		Height 8;
		Speed 8;
		Scale 1.6;
	}
	States
	{
	Spawn:
		TSHO ABCDEFGH 2;
		loop;
	Death:
		TSHO I -1;
		loop;
	}
}